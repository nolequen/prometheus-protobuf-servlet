group 'su.nlq'
version '0.2'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  compile group: 'org.jetbrains', name: 'annotations', version: '15.0'
  compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.4.0'
  compile group: 'io.prometheus', name: 'simpleclient', version: '0.1.0'

  compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.0'
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { final MavenDeployment deployment -> signing.signPom(deployment) }

      def user = project.hasProperty("ossrhUsername") ? ossrhUsername : ''
      def password = project.hasProperty("ossrhUsername") ? ossrhPassword : ''

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: user, password: password)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: user, password: password)
      }

      pom.project {
        name 'Prometheus Protobuf Servlet'
        description 'Protobuf formatter and HTTP servlet for Prometheus client'
        url 'https://github.com/nolequen/prometheus-protobuf-servlet'
        licenses {
          license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution 'repo'
          }
        }
        scm {
          url 'https://github.com/nolequen/prometheus-protobuf-servlet'
          connection 'scm:git:git://github.com/nolequen/prometheus-protobuf-servlet.git'
          developerConnection 'scm:git:ssh://github.com:nolequen/prometheus-protobuf-servlet.git'
        }
        developers {
          developer {
            name "Nolequen"
            email "nolequen@gmail.com"
            url "http://www.nlq.su/"
          }
        }
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar, javadocJar
}

signing {
  sign configurations.archives
}